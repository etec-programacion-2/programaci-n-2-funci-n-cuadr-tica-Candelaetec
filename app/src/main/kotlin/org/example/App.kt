/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example
import kotlin.math.*
import java.math.RoundingMode

const val TermA: Double = 6.00
const val TermB: Double = 12.00
const val TermC: Double = 3.00

fun main() {
    
    if (TermA == 0.0) {
        println("El término A es 0.")
    } else {
        println("El término A no es 0.")
    }

    for (i in -5..5) {
        val x = i.toDouble()
        println("x = $x")
        println("f(x) = ${calcularF(TermA, TermB, TermC, x)}")
    }
    println("${TermA}x² + ${TermB}x + ${TermC}")

    val (root1, root2) = raiz(TermA, TermB, TermC)
    if (root1 != null && root2 != null) {
        println("Las raíces de la ecuación son: x1 = $root1, x2 = $root2")
    }
}

fun calcularF(TermA: Double, TermB: Double, TermC: Double, x: Double): Double {
    return TermA * x * x + TermB * x + TermC
}

fun raiz(TermA: Double, TermB: Double, TermC: Double): Pair<Double?, Double?> {
    val discriminante = TermB * TermB - 4 * TermA * TermC
    if (discriminante < 0) {
        println("No hay raíces reales.")
        return Pair(null, null)
    }
    val root1 = (-TermB + Math.sqrt(discriminante)) / (2 * TermA)
    val root1redondeado = root1.toBigDecimal().setScale(2, RoundingMode.HALF_UP).toDouble()
    val root2 = (-TermB - Math.sqrt(discriminante)) / (2 * TermA)
    val root2redondeado = root2.toBigDecimal().setScale(2, RoundingMode.HALF_UP).toDouble()
    return Pair(root1redondeado, root2redondeado)
}